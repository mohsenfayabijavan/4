<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Program\Program.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Program\Program.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Dec 09 01:18:15 2020
<BR><P>
<H3>Maximum Stack Usage =        808 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; PrayTime::getDatePrayerTimes(int, int, int, double, double, double) &rArr; PrayTime::computeDayTimes() &rArr; PrayTime::computeTimes() &rArr; PrayTime::computeTime(double, double) &rArr; PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x6.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[15]">TIM16_IRQHandler</a> from stm32f0xx_it.o(i.TIM16_IRQHandler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[16]">TIM17_IRQHandler</a> from stm32f0xx_it.o(i.TIM17_IRQHandler) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[19]">USART1_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x6.o(.text) referenced from startup_stm32f030x6.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x6.o(.text)
 <LI><a href="#[1e]">__sti___6_main_c_lite</a> from main.o(i.__sti___6_main_c_lite) referenced from main.o(.init_array)
 <LI><a href="#[1d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[1a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[20]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ed]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[22]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ee]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ef]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::hshisleap(int)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::grgisleap(int)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::milady_to_shamsy(int, int, int)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimes()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::DEC2BCD(char)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::lite_calc()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_lite_long()
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::lite_calc()
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::shamsy_to_milady(int, int, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::str_find(char*, char*, int, int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[1f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::hshisleap(int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Longitude(float)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Latitudes(float)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Longitude()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Latitudes()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeMidDay(double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimes()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::getDatePrayerTimes(int, int, int, double, double, double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeMidDay(double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimes()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::RadianToDegree(double)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::DegreeToRadian(double)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::getDatePrayerTimes(int, int, int, double, double, double)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::RadianToDegree(double)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::DegreeToRadian(double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimes()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::hshisleap(int)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Longitude()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Latitudes()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimes()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::hshisleap(int)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Longitude(float)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Latitudes(float)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fb]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[34]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[33]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d8]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[fd]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fe]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[ff]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init()
</UL>

<P><STRONG><a name="[44]"></a>HAL_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::milady_to_shamsy(int, int, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_one_byte(int, char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::key_pressed_up(char, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[46]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 20 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Init()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_ReadByte()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::check_key()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_ReadByte()
</UL>

<P><STRONG><a name="[eb]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendData(unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendByte(unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_ReadByte()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendCmd(unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[75]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init()
</UL>

<P><STRONG><a name="[76]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init()
</UL>

<P><STRONG><a name="[47]"></a>HAL_I2C_Init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init()
</UL>

<P><STRONG><a name="[49]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::get_time(char)
</UL>

<P><STRONG><a name="[4e]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::set_time(int, char, char, char, char, char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::get_time(char)
</UL>

<P><STRONG><a name="[50]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_char(char*, char, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_int(int*, char, int)
</UL>

<P><STRONG><a name="[52]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_one_byte(int, char)
</UL>

<P><STRONG><a name="[48]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[71]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[56]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>HAL_InitTick</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[58]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[64]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[5a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[5c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[5d]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[5e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[60]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1412 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[59]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[6a]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init()
</UL>

<P><STRONG><a name="[62]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f0xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 456 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; DS1331::get_time(char) &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; DS1331::get_time(char) &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::get_time(char)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::lite_calc()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::cal_on_off_time()
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIM16_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; DS1331::get_time(char) &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM17_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; DS1331::get_time(char) &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x6.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[79]"></a>ee_read_varabel()</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, main.o(i._Z15ee_read_varabelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ee_read_varabel() &rArr; VARABEL::ee_read_Longitude() &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Longitude()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Latitudes()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_char(char*, char, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_int(int*, char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>read_i2c_in_main()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i._Z16read_i2c_in_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_i2c_in_main()
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::set_time(int, char, char, char, char, char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::get_time(char)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_char(char*, char, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_int(int*, char, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_one_byte(int, char)
</UL>

<P><STRONG><a name="[81]"></a>SystemClock_Config()</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>MAINHELPER::change_date()</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, main.o(i._ZN10MAINHELPER11change_dateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = MAINHELPER::change_date() &rArr; DATE_CALC::shamsy_to_milady(int, int, int) &rArr; DATE_CALC::hshisleap(int) &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::shamsy_to_milady(int, int, int)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::check_day_shamsi(int, char)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::set_time(int, char, char, char, char, char)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[8a]"></a>MAINHELPER::change_time()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(i._ZN10MAINHELPER11change_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = MAINHELPER::change_time() &rArr; MAINHELPER::change_number(char*, char*, long, int, long) &rArr; LCD_CHARACTERI::show(char*, unsigned char, unsigned char) &rArr; LCD_CHARACTERI::GoTo(unsigned char, unsigned char) &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::set_time(int, char, char, char, char, char)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[92]"></a>MAINHELPER::valu_number(long)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i._ZN10MAINHELPER11valu_numberEl))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[86]"></a>MAINHELPER::change_number(char*, char*, long, int, long)</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, main.o(i._ZN10MAINHELPER13change_numberEPcS0_lil))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = MAINHELPER::change_number(char*, char*, long, int, long) &rArr; LCD_CHARACTERI::show(char*, unsigned char, unsigned char) &rArr; LCD_CHARACTERI::GoTo(unsigned char, unsigned char) &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::get_delay()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::debons(char, int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Clear()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::str_find(char*, char*, int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::key_pressed_up(char, int, int)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::valu_number(long)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_lite_long()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_time()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_date()
</UL>

<P><STRONG><a name="[93]"></a>MAINHELPER::change_on_time()</STRONG> (Thumb, 1204 bytes, Stack size 40 bytes, main.o(i._ZN10MAINHELPER14change_on_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MAINHELPER::change_on_time() &rArr; VARABEL::update_eeprom() &rArr; VARABEL::ee_set_Longitude(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Clear()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::key_pressed_up(char, int, int)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[8b]"></a>MAINHELPER::key_pressed_up(char, int, int)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(i._ZN10MAINHELPER14key_pressed_upEcii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MAINHELPER::key_pressed_up(char, int, int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[6e]"></a>MAINHELPER::cal_on_off_time()</STRONG> (Thumb, 240 bytes, Stack size 36 bytes, main.o(i._ZN10MAINHELPER15cal_on_off_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MAINHELPER::cal_on_off_time() &rArr; MAINHELPER::sum_or_sub_time(TIME_*, char, char, char, char, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::sum_or_sub_time(TIME_*, char, char, char, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[96]"></a>MAINHELPER::change_off_time()</STRONG> (Thumb, 1204 bytes, Stack size 40 bytes, main.o(i._ZN10MAINHELPER15change_off_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MAINHELPER::change_off_time() &rArr; VARABEL::update_eeprom() &rArr; VARABEL::ee_set_Longitude(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Clear()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::key_pressed_up(char, int, int)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[95]"></a>MAINHELPER::sum_or_sub_time(TIME_*, char, char, char, char, char)</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, main.o(i._ZN10MAINHELPER15sum_or_sub_timeEP5TIME_ccccc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MAINHELPER::sum_or_sub_time(TIME_*, char, char, char, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::cal_on_off_time()
</UL>

<P><STRONG><a name="[97]"></a>MAINHELPER::change_Latitudes()</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, main.o(i._ZN10MAINHELPER16change_LatitudesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MAINHELPER::change_Latitudes() &rArr; VARABEL::update_eeprom() &rArr; VARABEL::ee_set_Longitude(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>MAINHELPER::change_Longitude()</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, main.o(i._ZN10MAINHELPER16change_LongitudeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MAINHELPER::change_Longitude() &rArr; VARABEL::update_eeprom() &rArr; VARABEL::ee_set_Longitude(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[9c]"></a>MAINHELPER::change_lite_long()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main.o(i._ZN10MAINHELPER16change_lite_longEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MAINHELPER::change_lite_long() &rArr; EEPROM_24Cxx::write_int(int, char, int) &rArr; EEPROM_24Cxx::read_int(int*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_int(int, char, int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[9e]"></a>MAINHELPER::menu(unsigned char)</STRONG> (Thumb, 976 bytes, Stack size 80 bytes, main.o(i._ZN10MAINHELPER4menuEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = MAINHELPER::menu(unsigned char) &rArr; MAINHELPER::change_date() &rArr; DATE_CALC::shamsy_to_milady(int, int, int) &rArr; DATE_CALC::hshisleap(int) &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::milady_to_shamsy(int, int, int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Clear()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_lite_long()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::key_pressed_up(char, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_time()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_date()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>MAINHELPER::str_find(char*, char*, int, int)</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, main.o(i._ZN10MAINHELPER8str_findEPcS0_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MAINHELPER::str_find(char*, char*, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[6f]"></a>MAINHELPER::lite_calc()</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, main.o(i._ZN10MAINHELPER9lite_calcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MAINHELPER::lite_calc() &rArr; DATE_CALC::cal_on_off_out(TIME_, TIME_, TIME_)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::cal_on_off_out(TIME_, TIME_, TIME_)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[a4]"></a>EEPROM_24Cxx::write_char(char, char, int)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, main.o(i._ZN12EEPROM_24Cxx10write_charEcci))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = EEPROM_24Cxx::write_char(char, char, int) &rArr; EEPROM_24Cxx::read_char(char*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_char(char*, char, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_one_byte(int, char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::find_sector(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
</UL>

<P><STRONG><a name="[a7]"></a>EEPROM_24Cxx::write_long(long, char, int)</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, main.o(i._ZN12EEPROM_24Cxx10write_longElci))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_one_byte(int, char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::find_sector(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Longitude(float)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Latitudes(float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
</UL>

<P><STRONG><a name="[a5]"></a>EEPROM_24Cxx::find_sector(int, int)</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, main.o(i._ZN12EEPROM_24Cxx11find_sectorEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROM_24Cxx::find_sector(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_int(int, char, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_char(char*, char, int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_int(int*, char, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_long(long, char, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_char(char, char, int)
</UL>

<P><STRONG><a name="[a6]"></a>EEPROM_24Cxx::write_one_byte(int, char)</STRONG> (Thumb, 68 bytes, Stack size 112 bytes, main.o(i._ZN12EEPROM_24Cxx14write_one_byteEic))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EEPROM_24Cxx::write_one_byte(int, char) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_int(int, char, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_long(long, char, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_char(char, char, int)
</UL>

<P><STRONG><a name="[7d]"></a>EEPROM_24Cxx::read_int(int*, char, int)</STRONG> (Thumb, 86 bytes, Stack size 120 bytes, main.o(i._ZN12EEPROM_24Cxx8read_intEPici))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EEPROM_24Cxx::read_int(int*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::find_sector(int, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_int(int, char, int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_read_varabel()
</UL>

<P><STRONG><a name="[7a]"></a>EEPROM_24Cxx::read_char(char*, char, int)</STRONG> (Thumb, 80 bytes, Stack size 120 bytes, main.o(i._ZN12EEPROM_24Cxx9read_charEPcci))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EEPROM_24Cxx::read_char(char*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::find_sector(int, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_char(char, char, int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_read_varabel()
</UL>

<P><STRONG><a name="[7e]"></a>EEPROM_24Cxx::read_long(long*, char, int)</STRONG> (Thumb, 98 bytes, Stack size 120 bytes, main.o(i._ZN12EEPROM_24Cxx9read_longEPlci))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::find_sector(int, int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Longitude()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_read_Latitudes()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_long(long, char, int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_read_varabel()
</UL>

<P><STRONG><a name="[9d]"></a>EEPROM_24Cxx::write_int(int, char, int)</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, main.o(i._ZN12EEPROM_24Cxx9write_intEici))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = EEPROM_24Cxx::write_int(int, char, int) &rArr; EEPROM_24Cxx::read_int(int*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_int(int*, char, int)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_one_byte(int, char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::find_sector(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_lite_long()
</UL>

<P><STRONG><a name="[e4]"></a>EEPROM_24Cxx::EEPROM_24Cxx()</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, main.o(i._ZN12EEPROM_24CxxC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROM_24Cxx::EEPROM_24Cxx()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_lite
</UL>

<P><STRONG><a name="[101]"></a>EEPROM_24Cxx::EEPROM_24Cxx__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, main.o(i._ZN12EEPROM_24CxxC1Ev), UNUSED)

<P><STRONG><a name="[a8]"></a>LCD_CHARACTERI::LCD_SendCmd(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i._ZN14LCD_CHARACTERI11LCD_SendCmdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::delay_us(int)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Clear()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Init()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::GoTo(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ab]"></a>LCD_CHARACTERI::LCD_ReadByte()</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, main.o(i._ZN14LCD_CHARACTERI12LCD_ReadByteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::delay_us(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendByte(unsigned char)
</UL>

<P><STRONG><a name="[aa]"></a>LCD_CHARACTERI::LCD_SendByte(unsigned char)</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, main.o(i._ZN14LCD_CHARACTERI12LCD_SendByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::delay_us(int)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_ReadByte()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendData(unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendCmd(unsigned char)
</UL>

<P><STRONG><a name="[ad]"></a>LCD_CHARACTERI::LCD_SendData(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i._ZN14LCD_CHARACTERI12LCD_SendDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_CHARACTERI::LCD_SendData(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::delay_us(int)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::SendText(char*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ae]"></a>LCD_CHARACTERI::GoTo(unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, main.o(i._ZN14LCD_CHARACTERI4GoToEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_CHARACTERI::GoTo(unsigned char, unsigned char) &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[af]"></a>LCD_CHARACTERI::Init()</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, main.o(i._ZN14LCD_CHARACTERI4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_CHARACTERI::Init() &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::delay_ms(int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>LCD_CHARACTERI::show(char*, unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(i._ZN14LCD_CHARACTERI4showEPchh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_CHARACTERI::show(char*, unsigned char, unsigned char) &rArr; LCD_CHARACTERI::GoTo(unsigned char, unsigned char) &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::SendText(char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::GoTo(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::check_key()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[9f]"></a>LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char)</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, main.o(i._ZN14LCD_CHARACTERI4showEmhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LCD_CHARACTERI::show(unsigned long, unsigned char, unsigned char) &rArr; LCD_CHARACTERI::show(char*, unsigned char, unsigned char) &rArr; LCD_CHARACTERI::GoTo(unsigned char, unsigned char) &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::GoTo(unsigned char, unsigned char)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendData(unsigned char)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[90]"></a>LCD_CHARACTERI::Clear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN14LCD_CHARACTERI5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_CHARACTERI::Clear() &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendCmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[b1]"></a>LCD_CHARACTERI::SendText(char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._ZN14LCD_CHARACTERI8SendTextEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_CHARACTERI::SendText(char*) &rArr; LCD_CHARACTERI::LCD_SendData(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b0]"></a>LCD_CHARACTERI::delay_ms(int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i._ZN14LCD_CHARACTERI8delay_msEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_CHARACTERI::delay_ms(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Init()
</UL>

<P><STRONG><a name="[a9]"></a>LCD_CHARACTERI::delay_us(int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i._ZN14LCD_CHARACTERI8delay_usEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_CHARACTERI::delay_us(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendData(unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendByte(unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_ReadByte()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::LCD_SendCmd(unsigned char)
</UL>

<P><STRONG><a name="[b3]"></a>DS1331::BCD2DEC(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i._ZN6DS13317BCD2DECEc))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::get_time(char)
</UL>

<P><STRONG><a name="[b2]"></a>DS1331::DEC2BCD(char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i._ZN6DS13317DEC2BCDEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DS1331::DEC2BCD(char) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::set_time(int, char, char, char, char, char)
</UL>

<P><STRONG><a name="[6d]"></a>DS1331::get_time(char)</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, main.o(i._ZN6DS13318get_timeEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DS1331::get_time(char) &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::BCD2DEC(char)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[89]"></a>DS1331::set_time(int, char, char, char, char, char)</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, main.o(i._ZN6DS13318set_timeEiccccc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DS1331::set_time(int, char, char, char, char, char) &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1331::DEC2BCD(char)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c_in_main()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_time()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_date()
</UL>

<P><STRONG><a name="[94]"></a>VARABEL::update_eeprom()</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, main.o(i._ZN7VARABEL13update_eepromEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VARABEL::update_eeprom() &rArr; VARABEL::ee_set_Longitude(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Longitude(float)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::ee_set_Latitudes(float)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_int(int, char, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_long(long, char, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_char(char, char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
</UL>

<P><STRONG><a name="[b5]"></a>VARABEL::ee_set_Latitudes(float)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(i._ZN7VARABEL16ee_set_LatitudesEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = VARABEL::ee_set_Latitudes(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_long(long, char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
</UL>

<P><STRONG><a name="[b4]"></a>VARABEL::ee_set_Longitude(float)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(i._ZN7VARABEL16ee_set_LongitudeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = VARABEL::ee_set_Longitude(float) &rArr; EEPROM_24Cxx::write_long(long, char, int) &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::write_long(long, char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::update_eeprom()
</UL>

<P><STRONG><a name="[7c]"></a>VARABEL::ee_read_Latitudes()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i._ZN7VARABEL17ee_read_LatitudesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VARABEL::ee_read_Latitudes() &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_read_varabel()
</UL>

<P><STRONG><a name="[7b]"></a>VARABEL::ee_read_Longitude()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i._ZN7VARABEL17ee_read_LongitudeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VARABEL::ee_read_Longitude() &rArr; EEPROM_24Cxx::read_long(long*, char, int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::read_long(long*, char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_read_varabel()
</UL>

<P><STRONG><a name="[e1]"></a>VARABEL::VARABEL()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN7VARABELC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_lite
</UL>

<P><STRONG><a name="[102]"></a>VARABEL::VARABEL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN7VARABELC1Ev), UNUSED)

<P><STRONG><a name="[70]"></a>KEY_READ::read()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, main.o(i._ZN8KEY_READ4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_READ::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::HAL_Delay(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::check_key()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::debons(char, int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::key_pressed_up(char, int, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[8e]"></a>KEY_READ::debons(char, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i._ZN8KEY_READ6debonsEci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY_READ::debons(char, int) &rArr; KEY_READ::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::HAL_Delay(int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[b6]"></a>KEY_READ::HAL_Delay(int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i._ZN8KEY_READ9HAL_DelayEi))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::check_key()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::debons(char, int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
</UL>

<P><STRONG><a name="[b7]"></a>KEY_READ::check_key()</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, main.o(i._ZN8KEY_READ9check_keyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = KEY_READ::check_key() &rArr; LCD_CHARACTERI::show(char*, unsigned char, unsigned char) &rArr; LCD_CHARACTERI::GoTo(unsigned char, unsigned char) &rArr; LCD_CHARACTERI::LCD_SendCmd(unsigned char) &rArr; LCD_CHARACTERI::LCD_SendByte(unsigned char) &rArr; LCD_CHARACTERI::LCD_ReadByte() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::HAL_Delay(int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::read()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>KEY_READ::get_delay()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i._ZN8KEY_READ9get_delayEv))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
</UL>

<P><STRONG><a name="[e3]"></a>KEY_READ::KEY_READ()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN8KEY_READC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_lite
</UL>

<P><STRONG><a name="[103]"></a>KEY_READ::KEY_READ__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN8KEY_READC1Ev), UNUSED)

<P><STRONG><a name="[b8]"></a>PrayTime::JulianDate(int, int, int)</STRONG> (Thumb, 228 bytes, Stack size 120 bytes, main.o(i._ZN8PrayTime10JulianDateEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PrayTime::JulianDate(int, int, int) &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::getDatePrayerTimes(int, int, int, double, double, double)
</UL>

<P><STRONG><a name="[ba]"></a>PrayTime::adjustTimes()</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, main.o(i._ZN8PrayTime11adjustTimesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrayTime::adjustTimes() &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeDayTimes()
</UL>

<P><STRONG><a name="[bb]"></a>PrayTime::computeTime(double, double)</STRONG> (Thumb, 276 bytes, Stack size 120 bytes, main.o(i._ZN8PrayTime11computeTimeEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = PrayTime::computeTime(double, double) &rArr; PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dsin(double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dcos(double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunDeclination(double)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::RadianToDegree(double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeMidDay(double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTimes()
</UL>

<P><STRONG><a name="[c3]"></a>PrayTime::sunPosition(double, char)</STRONG> (Thumb, 506 bytes, Stack size 136 bytes, main.o(i._ZN8PrayTime11sunPositionEdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dsin(double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dcos(double)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::RadianToDegree(double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunDeclination(double)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::equationOfTime(double)
</UL>

<P><STRONG><a name="[c8]"></a>PrayTime::computeTimes()</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, main.o(i._ZN8PrayTime12computeTimesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = PrayTime::computeTimes() &rArr; PrayTime::computeTime(double, double) &rArr; PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeMidDay(double)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeDayTimes()
</UL>

<P><STRONG><a name="[bd]"></a>PrayTime::computeMidDay(double)</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, main.o(i._ZN8PrayTime13computeMidDayEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::equationOfTime(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTimes()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>

<P><STRONG><a name="[ca]"></a>PrayTime::floatToTime24(double, char*, char*)</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, main.o(i._ZN8PrayTime13floatToTime24EdPcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PrayTime::floatToTime24(double, char*, char*) &rArr; PrayTime::FixHour(double) &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimesFormat()
</UL>

<P><STRONG><a name="[cb]"></a>PrayTime::DegreeToRadian(double)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i._ZN8PrayTime14DegreeToRadianEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrayTime::DegreeToRadian(double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dsin(double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dcos(double)
</UL>

<P><STRONG><a name="[c1]"></a>PrayTime::RadianToDegree(double)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i._ZN8PrayTime14RadianToDegreeEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrayTime::RadianToDegree(double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>

<P><STRONG><a name="[c9]"></a>PrayTime::equationOfTime(double)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(i._ZN8PrayTime14equationOfTimeEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeMidDay(double)
</UL>

<P><STRONG><a name="[bc]"></a>PrayTime::sunDeclination(double)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(i._ZN8PrayTime14sunDeclinationEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PrayTime::sunDeclination(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>

<P><STRONG><a name="[cc]"></a>PrayTime::computeDayTimes()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i._ZN8PrayTime15computeDayTimesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PrayTime::computeDayTimes() &rArr; PrayTime::computeTimes() &rArr; PrayTime::computeTime(double, double) &rArr; PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimesFormat()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTimes()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::adjustTimes()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::getDatePrayerTimes(int, int, int, double, double, double)
</UL>

<P><STRONG><a name="[cd]"></a>PrayTime::adjustTimesFormat()</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, main.o(i._ZN8PrayTime17adjustTimesFormatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PrayTime::adjustTimesFormat() &rArr; PrayTime::floatToTime24(double, char*, char*) &rArr; PrayTime::FixHour(double) &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeDayTimes()
</UL>

<P><STRONG><a name="[ce]"></a>PrayTime::getDatePrayerTimes(int, int, int, double, double, double)</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, main.o(i._ZN8PrayTime18getDatePrayerTimesEiiiddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PrayTime::getDatePrayerTimes(int, int, int, double, double, double) &rArr; PrayTime::computeDayTimes() &rArr; PrayTime::computeTimes() &rArr; PrayTime::computeTime(double, double) &rArr; PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeDayTimes()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>PrayTime::dcos(double)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, main.o(i._ZN8PrayTime4dcosEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PrayTime::dcos(double) &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::DegreeToRadian(double)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>

<P><STRONG><a name="[bf]"></a>PrayTime::dsin(double)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, main.o(i._ZN8PrayTime4dsinEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::DegreeToRadian(double)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>

<P><STRONG><a name="[c6]"></a>PrayTime::FixHour(double)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, main.o(i._ZN8PrayTime7FixHourEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PrayTime::FixHour(double) &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeMidDay(double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
</UL>

<P><STRONG><a name="[c4]"></a>PrayTime::FixAngle(double)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, main.o(i._ZN8PrayTime8FixAngleEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PrayTime::FixAngle(double) &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
</UL>

<P><STRONG><a name="[e2]"></a>PrayTime::PrayTime()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i._ZN8PrayTimeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_lite
</UL>

<P><STRONG><a name="[104]"></a>PrayTime::PrayTime__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN8PrayTimeC1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>DATE_CALC::cal_on_off_out(TIME_, TIME_, TIME_)</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, main.o(i._ZN9DATE_CALC14cal_on_off_outE5TIME_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DATE_CALC::cal_on_off_out(TIME_, TIME_, TIME_)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::lite_calc()
</UL>

<P><STRONG><a name="[87]"></a>DATE_CALC::check_day_shamsi(int, char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i._ZN9DATE_CALC16check_day_shamsiEic))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_date()
</UL>

<P><STRONG><a name="[a0]"></a>DATE_CALC::milady_to_shamsy(int, int, int)</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, main.o(i._ZN9DATE_CALC16milady_to_shamsyEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DATE_CALC::milady_to_shamsy(int, int, int) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
</UL>

<P><STRONG><a name="[88]"></a>DATE_CALC::shamsy_to_milady(int, int, int)</STRONG> (Thumb, 286 bytes, Stack size 256 bytes, main.o(i._ZN9DATE_CALC16shamsy_to_miladyEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = DATE_CALC::shamsy_to_milady(int, int, int) &rArr; DATE_CALC::hshisleap(int) &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::hshisleap(int)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::grgisleap(int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_date()
</UL>

<P><STRONG><a name="[d3]"></a>DATE_CALC::grgisleap(int)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i._ZN9DATE_CALC9grgisleapEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DATE_CALC::grgisleap(int) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::shamsy_to_milady(int, int, int)
</UL>

<P><STRONG><a name="[d2]"></a>DATE_CALC::hshisleap(int)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, main.o(i._ZN9DATE_CALC9hshisleapEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DATE_CALC::hshisleap(int) &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::shamsy_to_milady(int, int, int)
</UL>

<P><STRONG><a name="[d5]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[105]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[85]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_lite_long()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Longitude()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_Latitudes()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_off_time()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_on_time()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_number(char*, char*, long, int, long)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_time()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::change_date()
</UL>

<P><STRONG><a name="[3e]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5f]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[dc]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[d7]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[d9]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[da]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[db]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[df]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[e0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[dd]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[106]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[107]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[108]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[c0]"></a>acos</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = acos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::computeTime(double, double)
</UL>

<P><STRONG><a name="[c7]"></a>asin</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
</UL>

<P><STRONG><a name="[e9]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[c5]"></a>atan2</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::sunPosition(double, char)
</UL>

<P><STRONG><a name="[cf]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dcos(double)
</UL>

<P><STRONG><a name="[b9]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixAngle(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::FixHour(double)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::floatToTime24(double, char*, char*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::JulianDate(int, int, int)
</UL>

<P><STRONG><a name="[d4]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::hshisleap(int)
</UL>

<P><STRONG><a name="[1a]"></a>main</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = main &rArr; PrayTime::getDatePrayerTimes(int, int, int, double, double, double) &rArr; PrayTime::computeDayTimes() &rArr; PrayTime::computeTimes() &rArr; PrayTime::computeTime(double, double) &rArr; PrayTime::computeMidDay(double) &rArr; PrayTime::equationOfTime(double) &rArr; PrayTime::sunPosition(double, char) &rArr; PrayTime::dsin(double) &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATE_CALC::milady_to_shamsy(int, int, int)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::getDatePrayerTimes(int, int, int, double, double, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::check_key()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Clear()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::show(char*, unsigned char, unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CHARACTERI::Init()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAINHELPER::menu(unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_read_varabel()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d0]"></a>sin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::dsin(double)
</UL>

<P><STRONG><a name="[e8]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[72]"></a>MX_GPIO_Init()</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, main.o(i._Z12MX_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init() &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>MX_I2C1_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i._Z12MX_I2C1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_I2C1_Init() &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>MX_TIM16_Init()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i._Z13MX_TIM16_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM16_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MX_TIM17_Init()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z13MX_TIM17_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM17_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>__sti___6_main_c_lite</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(i.__sti___6_main_c_lite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___6_main_c_lite &rArr; EEPROM_24Cxx::EEPROM_24Cxx()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrayTime::PrayTime()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_READ::KEY_READ()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VARABEL::VARABEL()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_24Cxx::EEPROM_24Cxx()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[83]"></a>I2C_Flush_TXDR(__I2C_HandleTypeDef*)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f0xx_hal_i2c.o(i._Z14I2C_Flush_TXDRP19__I2C_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[4b]"></a>I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f0xx_hal_i2c.o(i._Z18I2C_TransferConfigP19__I2C_HandleTypeDefthjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[51]"></a>I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i._Z21I2C_RequestMemoryReadP19__I2C_HandleTypeDeftttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[53]"></a>I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i._Z22I2C_RequestMemoryWriteP19__I2C_HandleTypeDeftttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig(__I2C_HandleTypeDef*, unsigned short, unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[82]"></a>I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i._Z23I2C_IsAcknowledgeFailedP19__I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR(__I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[4a]"></a>I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i._Z26I2C_WaitOnFlagUntilTimeoutP19__I2C_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[4c]"></a>I2C_WaitOnRXNEFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i._Z30I2C_WaitOnRXNEFlagUntilTimeoutP19__I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[4d]"></a>I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i._Z30I2C_WaitOnSTOPFlagUntilTimeoutP19__I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[4f]"></a>I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i._Z30I2C_WaitOnTXISFlagUntilTimeoutP19__I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, unsigned) &rArr; I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(__I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(__I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[5b]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[d6]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[e6]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
